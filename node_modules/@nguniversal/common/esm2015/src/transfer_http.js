/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HTTP_INTERCEPTORS, HttpHeaders, HttpResponse } from '@angular/common/http';
import { ApplicationRef, Injectable, NgModule } from '@angular/core';
import { BrowserTransferStateModule, TransferState, makeStateKey } from '@angular/platform-browser';
import { of as observableOf } from 'rxjs';
import { tap, take, filter } from 'rxjs/operators';
/**
 * @record
 */
export function TransferHttpResponse() { }
function TransferHttpResponse_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    TransferHttpResponse.prototype.body;
    /** @type {?|undefined} */
    TransferHttpResponse.prototype.headers;
    /** @type {?|undefined} */
    TransferHttpResponse.prototype.status;
    /** @type {?|undefined} */
    TransferHttpResponse.prototype.statusText;
    /** @type {?|undefined} */
    TransferHttpResponse.prototype.url;
}
/**
 * @param {?} headers
 * @return {?}
 */
function getHeadersMap(headers) {
    const /** @type {?} */ headersMap = {};
    for (const /** @type {?} */ key of headers.keys()) {
        headersMap[key] = /** @type {?} */ ((headers.getAll(key)));
    }
    return headersMap;
}
export class TransferHttpCacheInterceptor {
    /**
     * @param {?} appRef
     * @param {?} transferState
     */
    constructor(appRef, transferState) {
        this.transferState = transferState;
        this.isCacheActive = true;
        // Stop using the cache if the application has stabilized, indicating initial rendering is
        // complete.
        appRef.isStable
            .pipe(filter((isStable) => isStable), take(1)).toPromise()
            .then(() => { this.isCacheActive = false; });
    }
    /**
     * @param {?} url
     * @return {?}
     */
    invalidateCacheEntry(url) {
        this.transferState.remove(makeStateKey('G.' + url));
        this.transferState.remove(makeStateKey('H.' + url));
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // Stop using the cache if there is a mutating call.
        if (req.method !== 'GET' && req.method !== 'HEAD') {
            this.isCacheActive = false;
            this.invalidateCacheEntry(req.url);
        }
        if (!this.isCacheActive) {
            // Cache is no longer active. Pass the request through.
            return next.handle(req);
        }
        const /** @type {?} */ key = (req.method === 'GET' ? 'G.' : 'H.') + req.url;
        const /** @type {?} */ storeKey = makeStateKey(key);
        if (this.transferState.hasKey(storeKey)) {
            // Request found in cache. Respond using it.
            const /** @type {?} */ response = this.transferState.get(storeKey, /** @type {?} */ ({}));
            return observableOf(new HttpResponse({
                body: response.body,
                headers: new HttpHeaders(response.headers),
                status: response.status,
                statusText: response.statusText,
                url: response.url,
            }));
        }
        else {
            // Request not found in cache. Make the request and cache it.
            const /** @type {?} */ httpEvent = next.handle(req);
            return httpEvent
                .pipe(tap((event) => {
                if (event instanceof HttpResponse) {
                    this.transferState.set(storeKey, {
                        body: event.body,
                        headers: getHeadersMap(event.headers),
                        status: event.status,
                        statusText: event.statusText,
                        url: /** @type {?} */ ((event.url)),
                    });
                }
            }));
        }
    }
}
TransferHttpCacheInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TransferHttpCacheInterceptor.ctorParameters = () => [
    { type: ApplicationRef, },
    { type: TransferState, },
];
function TransferHttpCacheInterceptor_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TransferHttpCacheInterceptor.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TransferHttpCacheInterceptor.ctorParameters;
    /** @type {?} */
    TransferHttpCacheInterceptor.prototype.isCacheActive;
    /** @type {?} */
    TransferHttpCacheInterceptor.prototype.transferState;
}
/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
export class TransferHttpCacheModule {
}
TransferHttpCacheModule.decorators = [
    { type: NgModule, args: [{
                imports: [BrowserTransferStateModule],
                providers: [
                    TransferHttpCacheInterceptor,
                    { provide: HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true },
                ],
            },] }
];
function TransferHttpCacheModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TransferHttpCacheModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TransferHttpCacheModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,